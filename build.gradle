plugins {
    id("java")
    id("maven-publish")
    // id("signing") // Gradle whines about some signing task's implicit dependency on a publication task.
    id("net.auoeke.gronk").version("3.+")
    id("com.github.johnrengelman.shadow").version("latest.release")
}

final testProject = file("test/project").toPath()

version("0.4.1")
description("a javac plugin that disables exception checking and other bothersome restrictions")
javaVersion(22)

allprojects {
    group("net.auoeke")

    repositories {
        mavenCentral()
    }
}

gronk {
	export(sourceSets.main, com.sun.source.util.Plugin.class.module.packages.collect {"jdk.compiler/" + it})
}

sourceSets {
    test {
        java.srcDirs = [testProject.resolve("source")]
    }
}

repositories {
	mavenLocal()
}

dependencies {
    annotationProcessor("net.auoeke:uncheck-dummy") // Must avoid a dependency cycle somehow.
    implementation("net.auoeke:reflect")

    testAnnotationProcessor(rootProject)
    testImplementation(gradleTestKit())
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

java {
    withJavadocJar()
}

javadoc {
	options.addBooleanOption("-enable-preview", true)
	options.addBooleanOption("Xdoclint:none", true)
	options.addStringOption("-source", java.sourceCompatibility.toString())
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:-preview"
}

tasks.withType(Jar) {
    manifest.attributes("Automatic-Module-Name": "uncheck")
}

shadowJar {
    // assemble.dependsOn(it)

	archiveAppendix = archiveClassifier.get()
    archiveClassifier = null

	relocate("net.auoeke.reflect", "net.auoeke.uncheck.reflect")
	relocate("net.auoeke.result", "net.auoeke.uncheck.result")
	relocate("net.gudenau.lib.unsafe", "net.auoeke.uncheck.unsafe")
}

test {
    dependsOn(publishToMavenLocal)
    mustRunAfter(clean)
    useJUnitPlatform()
}

components.java {
    withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
        // Exclude the fat JAR from the main publication.
        skip()
    }
}

publishing {
    repositories {
	    maven(testProject.resolve("build/repository")) {
		    name = "test"
	    }

	    return
        maven(findProperty("maven.repository")) {
            username(findProperty("maven.username"))
            password(findProperty("maven.password"))
        }
    }

    publications {
        main(MavenPublication) {
            from(components.java)
        }

        dummy(MavenPublication) {
            from(components.java)
            artifactId("$project.name-dummy")
        }

        return // Shadow uses an old ASM that rejects Java 22.
        fat(MavenPublication) {
            shadow.component(fat)

            groupId(project.group)
            artifactId("$project.name-" + shadowJar.archiveAppendix.get())
            version(project.version)

            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }

	return
    publications.withType(MavenPublication) {
        pom {
	        url = "https://github.com/nnym/uncheck"

            licenses {
                license {
                    name = "MIT"
                    url = "https://opensource.org/licenses/MIT"
                }
            }

            developers {
                developer {
                    id = "nnym"
                    email = "tjmnkrajyej@gmail.com"
                }
            }

            scm {
	            url = "https://github.com/nnym/uncheck/tree/master"
	            connection = "scm:git:git://github.com/nnym/uncheck.git"
	            developerConnection = "scm:git:git://github.com/nnym/uncheck.git"
            }
        }
    }
}
