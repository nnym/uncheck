plugins {
    id("java")
    id("maven-publish")
    id("signing")
    id("net.auoeke.gronk").version("latest.release")
    id("com.github.johnrengelman.shadow").version("latest.release")
}

final fatName = name + "-all"
final exports = file("exports.options")
final testProject = file("test/project").toPath()

version("0.3.7")
description("a javac plugin that disables exception checking and other bothersome restrictions")
url("https://github.com/auoeke/uncheck")
javaVersion(17)

allprojects {
    group("net.auoeke")

    repositories {
        mavenCentral()
    }
}

sourceSets {
    test {
        java.srcDirs = [testProject.resolve("source")]
    }
}

dependencies {
    annotationProcessor("net.auoeke:uncheck-all")
    implementation("net.auoeke:reflect")
    implementation("org.ow2.asm:asm-tree")

    testAnnotationProcessor(rootProject)
    testImplementation(gradleTestKit())
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

java {
    withJavadocJar()
}

compileJava {
    options.compilerArgs += exports.readLines().collectMany {it.split(" ").toList()}
}

javadoc {
    options {
        optionFiles(exports)
    }
}

tasks.withType(Jar) {
    from(file("LICENSE")) {
        into("META-INF")
    }

    manifest.attributes(
        "Specification-Title": project.name,
        "Specification-Version": project.version
    )
}

shadowJar {
    assemble.dependsOn(it)

    mergeManifests {
        include {hasAttribute("Specification-Title", "reflect")}
    }

    archiveBaseName.set(fatName)
    archiveClassifier.set(null)

	relocate("net.auoeke.reflect", "net.auoeke.uncheck.reflect")
	relocate("net.auoeke.result", "net.auoeke.uncheck.result")
	relocate("net.gudenau.lib.unsafe", "net.auoeke.uncheck.unsafe")
	relocate("org.objectweb.asm", "net.auoeke.uncheck.asm")
}

test {
    dependsOn(publishToMavenLocal)
    mustRunAfter(clean)
    useJUnitPlatform()
}

components.java {
    withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
        // Exclude the fat JAR from the main publication.
        skip()
    }
}

org.gradle.api.internal.project.DefaultProject project = project

publishing {
    repositories {
	    maven(testProject.resolve("build/repository")) {
		    name = "test"
	    }

        maven("s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
            username(findProperty("ossrh.id"))
            password(findProperty("ossrh.password"))
        }
    }

    publications {
        main(MavenPublication) {
            from(components.java)
        }

        fat(MavenPublication) {
            shadow.component(fat)

            groupId(project.group)
            artifactId(fatName)
            version(project.version)

            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }

    publications.withType(MavenPublication) {MavenPublication publication ->
        publication.pom {
            licenses {
                license {
                    name.set("MIT")
                    url.set("https://opensource.org/licenses/MIT")
                }
            }

            developers {
                developer {
                    id.set("auoeke")
                    email.set("me@auoeke.net")
                }
            }

            scm {
                connection.set("scm:git:git://github.com/auoeke/uncheck.git")
                developerConnection.set("scm:git:git://github.com/auoeke/uncheck.git")
                url.set("https://github.com/auoeke/uncheck/tree/master")
            }
        }
    }
}
